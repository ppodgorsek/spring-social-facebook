// Docbook and Javadoc building and uploading tasks
buildscript {
	repositories {
		maven { url 'https://repo.spring.io/plugins-release' }
		maven { url 'https://plugins.gradle.org/m2/' }
	}
	dependencies {
		classpath "org.springframework.build.gradle:docbook-reference-plugin:$docbookReferencePluginVersion"
		classpath "me.champeau.gradle:gradle-javadoc-hotfix-plugin:$gradleJavadocHotfixPluginVersion"
		classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradlePluginVersion"
		classpath "org.asciidoctor:asciidoctor-java-integration:$asciidoctorJavaIntegrationVersion"
		classpath "io.spring.gradle:spring-io-plugin:$springIoPluginVersion"
	}
}

apply plugin: 'base'

description = "Spring Social Facebook - Documentation"

task docs {
    dependsOn 'manual:asciidoctor'
}

project('manual') {
    description = "Spring Social Facebook - Manual"
    apply plugin: 'base'
    apply plugin: 'org.asciidoctor.convert'

    ext.expandPlaceholders = ""

    asciidoctor {
        options = [
          eruby: 'erubis',
          attributes: [
              copycss : '',
              icons : 'font',
              'source-highlighter': 'prettify',
              sectanchors : '',
              toc2: '',
              idprefix: '',
              idseparator: '-',
              doctype: 'book',
              numbered: '',
              'spring-social-facebook-version' : project.version,
              'spring-social-version' : springSocialVersion,
              'spring-version' : springVersion,
              'jacksonVersion' : jacksonVersion,
              revnumber : project.version
          ]
        ]
    }

    ext.spec = copySpec {
        into ('reference/htmlsingle') {
            from(asciidoctor.outputDir)
            exclude 'build', 'Guardfile'
        }
    }
}

assemble.dependsOn = ['manual:asciidoctor']

task docsZip(type: Zip) {
    dependsOn docs
    group = 'Distribution'
    baseName = rootProject.name
    classifier = 'docs'
    description = "Builds -${classifier} archive containing api and reference " +
        "for deployment at static.springframework.org/spring-social/site/docs."

    with(project(':docs:manual').spec)
}

task schemaZip(type: Zip) {
    group = 'Distribution'
    baseName = rootProject.name
    classifier = 'schema'
    description = "Builds -${classifier} archive containing all " +
        "XSDs for deployment at static.springframework.org/schema."

    javaProjects.each { module ->
        def Properties schemas = new Properties();

        module.sourceSets.main.resources.find {
            it.path.endsWith('META-INF/spring.schemas')
        }?.withInputStream { schemas.load(it) }

        for (def key : schemas.keySet()) {
            def shortName = key.replaceAll(/http.*schema.(.*).spring-.*/, '$1')
            assert shortName != key
            File xsdFile = module.sourceSets.main.resources.find {
                it.path.endsWith(schemas.get(key))
            }
            assert xsdFile != null
            into (shortName) {
                from xsdFile.path
            }
        }
    }
}
